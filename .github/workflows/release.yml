name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        default: '0.1.0'
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for version detection
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Run tests
      run: uv run pytest -n auto --cov=python_redis_factory --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Run linting
      run: uv run ruff check .

    - name: Run type checking
      run: uv run mypy src/

    - name: Build package
      run: uv build

    - name: Auto-bump version and create tag
      run: |
        # Check if this is a merge from develop to main
        if git log --oneline -1 | grep -q "Merge pull request"; then
          echo "Detected merge from develop to main, auto-bumping version..."
          python scripts/version.py bump patch
          python scripts/version.py tag
        else
          echo "Not a merge from develop, skipping auto-version bump"
        fi

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 